#include <string>
#include <streambuf>
#include <SpircController.h>
#include <Session.h>
#include <PlainConnection.h>
#include <MercuryManager.h>
#include <memory>
#include <vector>
#include <iostream>
#include <inttypes.h>
#include <fstream>
#include <ApResolve.h>
#include "ZeroconfAuthenticator.h"
#include "SpotifyTrack.h"
#include "NamedPipeAudioSink.h"
#include "LoginBlob.h"
#include "PortAudioSink.h"
#include "ALSAAudioSink.h"

int main(int argc, char **argv)
{
    // auto doopa = std::vector<uint8_t>({8, 1, 18, 40, 100, 102, 101, 54, 53, 101, 100, 97, 55, 57, 97, 98, 53, 98, 99, 57, 49, 99, 54, 56, 57, 102, 48, 57, 52, 101, 48, 53, 53, 99, 100, 56, 97, 49, 97, 55, 48, 53, 98, 51, 26, 5, 50, 46, 48, 46, 48, 32, 190, 145, 193, 58, 40, 10, 58, 204, 2, 10, 20, 49, 46, 49, 46, 52, 56, 46, 54, 50, 53, 46, 103, 49, 99, 56, 55, 99, 55, 102, 55, 80, 1, 88, 1, 96, 163, 225, 1, 106, 21, 70, 105, 108, 105, 112, 226, 128, 153, 115, 32, 77, 97, 99, 66, 111, 111, 107, 32, 65, 105, 114, 120, 141, 255, 136, 184, 232, 46, 138, 1, 4, 8, 2, 16, 1, 138, 1, 4, 8, 3, 16, 0, 138, 1, 4, 8, 5, 16, 1, 138, 1, 4, 8, 6, 16, 1, 138, 1, 4, 8, 7, 16, 1, 138, 1, 4, 8, 10, 16, 1, 138, 1, 4, 8, 11, 16, 1, 138, 1, 4, 8, 12, 16, 0, 138, 1, 4, 8, 4, 16, 1, 138, 1, 4, 8, 8, 16, 64, 138, 1, 4, 8, 13, 16, 1, 138, 1, 4, 8, 14, 16, 1, 138, 1, 119, 8, 9, 26, 8, 97, 117, 100, 105, 111, 47, 97, 100, 26, 13, 97, 117, 100, 105, 111, 47, 101, 112, 105, 115, 111, 100, 101, 26, 19, 97, 117, 100, 105, 111, 47, 101, 112, 105, 115, 111, 100, 101, 43, 116, 114, 97, 99, 107, 26, 18, 97, 117, 100, 105, 111, 47, 105, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 26, 11, 97, 117, 100, 105, 111, 47, 108, 111, 99, 97, 108, 26, 11, 97, 117, 100, 105, 111, 47, 116, 114, 97, 99, 107, 26, 8, 118, 105, 100, 101, 111, 47, 97, 100, 26, 13, 118, 105, 100, 101, 111, 47, 101, 112, 105, 115, 111, 100, 101, 202, 1, 19, 10, 10, 116, 105, 101, 114, 49, 95, 112, 111, 114, 116, 18, 5, 53, 53, 57, 53, 56, 202, 1, 41, 10, 19, 100, 101, 118, 105, 99, 101, 95, 97, 100, 100, 114, 101, 115, 115, 95, 109, 97, 115, 107, 18, 18, 49, 57, 50, 46, 49, 54, 56, 46, 50, 53, 52, 46, 49, 50, 48, 47, 50, 52, 98, 168, 5, 18, 37, 115, 112, 111, 116, 105, 102, 121, 58, 97, 114, 116, 105, 115, 116, 58, 52, 103, 72, 115, 56, 112, 87, 115, 103, 90, 112, 110, 100, 81, 90, 75, 115, 54, 81, 86, 82, 72, 24, 0, 32, 204, 188, 15, 40, 2, 56, 133, 219, 142, 186, 232, 46, 66, 11, 103, 108, 97, 115, 115, 32, 98, 101, 97, 99, 104, 104, 0, 112, 0, 192, 1, 1, 200, 1, 0, 208, 1, 0, 218, 1, 18, 10, 16, 121, 233, 100, 229, 64, 49, 75, 103, 171, 250, 57, 91, 40, 175, 80, 157, 218, 1, 18, 10, 16, 90, 98, 79, 231, 176, 184, 75, 175, 169, 171, 252, 152, 102, 119, 217, 29, 218, 1, 18, 10, 16, 172, 137, 104, 171, 8, 58, 73, 199, 143, 92, 113, 184, 84, 9, 61, 141, 218, 1, 18, 10, 16, 164, 224, 200, 5, 145, 195, 76, 142, 178, 55, 166, 109, 56, 249, 95, 112, 218, 1, 18, 10, 16, 186, 189, 53, 241, 152, 241, 73, 47, 139, 60, 81, 86, 80, 41, 182, 151, 218, 1, 18, 10, 16, 22, 102, 128, 85, 36, 205, 77, 56, 179, 46, 57, 7, 35, 13, 11, 255, 218, 1, 18, 10, 16, 138, 139, 175, 115, 137, 87, 79, 163, 166, 239, 219, 245, 177, 80, 61, 161, 218, 1, 18, 10, 16, 116, 80, 15, 175, 49, 167, 68, 17, 152, 153, 91, 180, 226, 252, 252, 224, 218, 1, 18, 10, 16, 109, 27, 19, 126, 154, 213, 76, 94, 128, 131, 142, 88, 57, 154, 237, 3, 218, 1, 18, 10, 16, 201, 32, 211, 208, 28, 38, 73, 46, 191, 154, 191, 150, 123, 232, 235, 121, 218, 1, 18, 10, 16, 172, 137, 104, 171, 8, 58, 73, 199, 143, 92, 113, 184, 84, 9, 61, 141, 218, 1, 18, 10, 16, 121, 233, 100, 229, 64, 49, 75, 103, 171, 250, 57, 91, 40, 175, 80, 157, 218, 1, 18, 10, 16, 164, 224, 200, 5, 145, 195, 76, 142, 178, 55, 166, 109, 56, 249, 95, 112, 218, 1, 18, 10, 16, 116, 80, 15, 175, 49, 167, 68, 17, 152, 153, 91, 180, 226, 252, 252, 224, 218, 1, 18, 10, 16, 138, 139, 175, 115, 137, 87, 79, 163, 166, 239, 219, 245, 177, 80, 61, 161, 218, 1, 18, 10, 16, 90, 98, 79, 231, 176, 184, 75, 175, 169, 171, 252, 152, 102, 119, 217, 29, 218, 1, 18, 10, 16, 109, 27, 19, 126, 154, 213, 76, 94, 128, 131, 142, 88, 57, 154, 237, 3, 218, 1, 18, 10, 16, 22, 102, 128, 85, 36, 205, 77, 56, 179, 46, 57, 7, 35, 13, 11, 255, 218, 1, 18, 10, 16, 67, 122, 61, 253, 213, 109, 65, 24, 176, 83, 41, 199, 245, 72, 58, 235, 218, 1, 18, 10, 16, 179, 110, 32, 151, 212, 52, 72, 86, 134, 115, 231, 114, 134, 78, 49, 7, 218, 1, 18, 10, 16, 26, 53, 234, 254, 65, 133, 67, 118, 190, 105, 178, 215, 99, 86, 168, 167, 218, 1, 18, 10, 16, 203, 136, 6, 203, 5, 19, 70, 75, 184, 91, 148, 232, 75, 123, 215, 60, 218, 1, 18, 10, 16, 43, 112, 189, 213, 246, 232, 79, 213, 176, 49, 132, 90, 165, 168, 90, 6, 218, 1, 18, 10, 16, 186, 189, 53, 241, 152, 241, 73, 47, 139, 60, 81, 86, 80, 41, 182, 151, 218, 1, 18, 10, 16, 201, 32, 211, 208, 28, 38, 73, 46, 191, 154, 191, 150, 123, 232, 235, 121, 218, 1, 21, 18, 19, 115, 112, 111, 116, 105, 102, 121, 58, 109, 101, 116, 97, 58, 112, 97, 103, 101, 58, 50, 218, 1, 21, 18, 19, 115, 112, 111, 116, 105, 102, 121, 58, 109, 101, 116, 97, 58, 112, 97, 103, 101, 58, 51, 218, 1, 21, 18, 19, 115, 112, 111, 116, 105, 102, 121, 58, 109, 101, 116, 97, 58, 112, 97, 103, 101, 58, 52, 232, 1, 0, 136, 1, 209, 139, 193, 186, 232, 46});
    // Frame doko;
    // doko.parseFromVector(doopa);

    // return 0;
    std::string credentialsFileName = "authBlob.json";
    std::ifstream blobFile(credentialsFileName);

    std::shared_ptr<LoginBlob> blob;

    // Check if credential file exists
    if (!blobFile.good())
    {
        // Start zeroauth if not authenticated yet
        auto authenticator = std::make_shared<ZeroconfAuthenticator>();
        blob = authenticator->listenForRequests();

        // Store blob to file
        std::ofstream blobJsonFile(credentialsFileName);
        blobJsonFile << blob->toJson();
        blobJsonFile.close();
    }
    else
    {
        // Load blob from json and reuse it
        std::string jsonData((std::istreambuf_iterator<char>(blobFile)),
                             std::istreambuf_iterator<char>());

        blob = std::make_shared<LoginBlob>();
        // Assemble blob from json
        blob->loadJson(jsonData);
    }

    auto session = std::make_unique<Session>();
    session->connectWithRandomAp();
    auto token = session->authenticate(blob);

    // Auth successful
    if (token.size() > 0)
    {
        // @TODO Actually store this token somewhere
        auto mercuryManager = std::make_shared<MercuryManager>(std::move(session));
        mercuryManager->startTask();

#ifdef CSPOT_ENABLE_ALSA_SINK
        auto audioSink = std::make_shared<ALSAAudioSink>();
#elif defined(CSPOT_ENABLE_PORTAUDIO_SINK)
        auto audioSink = std::make_shared<PortAudioSink>();
#else
        auto audioSink = std::make_shared<NamedPipeAudioSink>();
#endif
        auto spircController = std::make_shared<SpircController>(mercuryManager, blob->username, audioSink);
        mercuryManager->reconnectedCallback = [spircController]() {
            return spircController->subscribe();
        };

        mercuryManager->handleQueue();
    }

    while (true)
        ;

    return 0;
}
