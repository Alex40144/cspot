/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.3-dev */

#ifndef PB_FACEBOOK_PUBLISH_PB_H_INCLUDED
#define PB_FACEBOOK_PUBLISH_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _End {
    bool has_seconds_played;
    int32_t seconds_played;
    bool has_end_time;
    int64_t end_time;
} End;

typedef struct _Id {
    pb_callback_t uri;
    bool has_start_time;
    int64_t start_time;
} Id;

typedef struct _Pause {
    bool has_seconds_played;
    int32_t seconds_played;
    bool has_end_time;
    int64_t end_time;
} Pause;

typedef struct _Resume {
    bool has_seconds_played;
    int32_t seconds_played;
    bool has_end_time;
    int64_t end_time;
} Resume;

typedef struct _RetryInfo {
    bool has_retry_delay;
    int32_t retry_delay;
    bool has_max_retry;
    int32_t max_retry;
} RetryInfo;

typedef struct _Seek {
    bool has_end_time;
    int64_t end_time;
} Seek;

typedef struct _Start {
    bool has_length;
    int32_t length;
    pb_callback_t context_uri;
    bool has_end_time;
    int64_t end_time;
} Start;

typedef struct _Event {
    bool has_id;
    Id id;
    bool has_start;
    Start start;
    bool has_seek;
    Seek seek;
    bool has_pause;
    Pause pause;
    bool has_resume;
    Resume resume;
    bool has_end;
    End end;
} Event;

typedef struct _EventReply {
    bool has_queued;
    int32_t queued;
    bool has_retry;
    RetryInfo retry;
} EventReply;


/* Initializer values for message structs */
#define EventReply_init_default                  {false, 0, false, RetryInfo_init_default}
#define RetryInfo_init_default                   {false, 0, false, 0}
#define Id_init_default                          {{{NULL}, NULL}, false, 0}
#define Start_init_default                       {false, 0, {{NULL}, NULL}, false, 0}
#define Seek_init_default                        {false, 0}
#define Pause_init_default                       {false, 0, false, 0}
#define Resume_init_default                      {false, 0, false, 0}
#define End_init_default                         {false, 0, false, 0}
#define Event_init_default                       {false, Id_init_default, false, Start_init_default, false, Seek_init_default, false, Pause_init_default, false, Resume_init_default, false, End_init_default}
#define EventReply_init_zero                     {false, 0, false, RetryInfo_init_zero}
#define RetryInfo_init_zero                      {false, 0, false, 0}
#define Id_init_zero                             {{{NULL}, NULL}, false, 0}
#define Start_init_zero                          {false, 0, {{NULL}, NULL}, false, 0}
#define Seek_init_zero                           {false, 0}
#define Pause_init_zero                          {false, 0, false, 0}
#define Resume_init_zero                         {false, 0, false, 0}
#define End_init_zero                            {false, 0, false, 0}
#define Event_init_zero                          {false, Id_init_zero, false, Start_init_zero, false, Seek_init_zero, false, Pause_init_zero, false, Resume_init_zero, false, End_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define End_seconds_played_tag                   1
#define End_end_time_tag                         2
#define Id_uri_tag                               1
#define Id_start_time_tag                        2
#define Pause_seconds_played_tag                 1
#define Pause_end_time_tag                       2
#define Resume_seconds_played_tag                1
#define Resume_end_time_tag                      2
#define RetryInfo_retry_delay_tag                1
#define RetryInfo_max_retry_tag                  2
#define Seek_end_time_tag                        1
#define Start_length_tag                         1
#define Start_context_uri_tag                    2
#define Start_end_time_tag                       3
#define Event_id_tag                             1
#define Event_start_tag                          2
#define Event_seek_tag                           3
#define Event_pause_tag                          4
#define Event_resume_tag                         5
#define Event_end_tag                            6
#define EventReply_queued_tag                    1
#define EventReply_retry_tag                     2

/* Struct field encoding specification for nanopb */
#define EventReply_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    queued,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  retry,             2)
#define EventReply_CALLBACK NULL
#define EventReply_DEFAULT NULL
#define EventReply_retry_MSGTYPE RetryInfo

#define RetryInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    retry_delay,       1) \
X(a, STATIC,   OPTIONAL, INT32,    max_retry,         2)
#define RetryInfo_CALLBACK NULL
#define RetryInfo_DEFAULT NULL

#define Id_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   uri,               1) \
X(a, STATIC,   OPTIONAL, INT64,    start_time,        2)
#define Id_CALLBACK pb_default_field_callback
#define Id_DEFAULT NULL

#define Start_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    length,            1) \
X(a, CALLBACK, OPTIONAL, STRING,   context_uri,       2) \
X(a, STATIC,   OPTIONAL, INT64,    end_time,          3)
#define Start_CALLBACK pb_default_field_callback
#define Start_DEFAULT NULL

#define Seek_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    end_time,          1)
#define Seek_CALLBACK NULL
#define Seek_DEFAULT NULL

#define Pause_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    seconds_played,    1) \
X(a, STATIC,   OPTIONAL, INT64,    end_time,          2)
#define Pause_CALLBACK NULL
#define Pause_DEFAULT NULL

#define Resume_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    seconds_played,    1) \
X(a, STATIC,   OPTIONAL, INT64,    end_time,          2)
#define Resume_CALLBACK NULL
#define Resume_DEFAULT NULL

#define End_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    seconds_played,    1) \
X(a, STATIC,   OPTIONAL, INT64,    end_time,          2)
#define End_CALLBACK NULL
#define End_DEFAULT NULL

#define Event_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  id,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  start,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  seek,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pause,             4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  resume,            5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  end,               6)
#define Event_CALLBACK NULL
#define Event_DEFAULT NULL
#define Event_id_MSGTYPE Id
#define Event_start_MSGTYPE Start
#define Event_seek_MSGTYPE Seek
#define Event_pause_MSGTYPE Pause
#define Event_resume_MSGTYPE Resume
#define Event_end_MSGTYPE End

extern const pb_msgdesc_t EventReply_msg;
extern const pb_msgdesc_t RetryInfo_msg;
extern const pb_msgdesc_t Id_msg;
extern const pb_msgdesc_t Start_msg;
extern const pb_msgdesc_t Seek_msg;
extern const pb_msgdesc_t Pause_msg;
extern const pb_msgdesc_t Resume_msg;
extern const pb_msgdesc_t End_msg;
extern const pb_msgdesc_t Event_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define EventReply_fields &EventReply_msg
#define RetryInfo_fields &RetryInfo_msg
#define Id_fields &Id_msg
#define Start_fields &Start_msg
#define Seek_fields &Seek_msg
#define Pause_fields &Pause_msg
#define Resume_fields &Resume_msg
#define End_fields &End_msg
#define Event_fields &Event_msg

/* Maximum encoded size of messages (where known) */
#define EventReply_size                          35
#define RetryInfo_size                           22
/* Id_size depends on runtime parameters */
/* Start_size depends on runtime parameters */
#define Seek_size                                11
#define Pause_size                               22
#define Resume_size                              22
#define End_size                                 22
/* Event_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
