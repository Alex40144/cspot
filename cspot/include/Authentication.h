// AUTOGENERATED FILE, DO NOT EDIT BY HAND
#ifndef PB_AUTHENTICATION_H
#define PB_AUTHENTICATION_H

#include <memory>
#include <vector>
#include <PbCommon.h>
#include <PbWriter.h>
#include <PbReader.h>

enum class CpuFamily : uint32_t {
    CPU_UNKNOWN = 0,
    CPU_X86 = 1,
    CPU_X86_64 = 2,
    CPU_PPC = 3,
    CPU_PPC_64 = 4,
    CPU_ARM = 5,
    CPU_IA64 = 6,
    CPU_SH = 7,
    CPU_MIPS = 8,
    CPU_BLACKFIN = 9
};

enum class Os : uint32_t {
    OS_UNKNOWN = 0,
    OS_WINDOWS = 1,
    OS_OSX = 2,
    OS_IPHONE = 3,
    OS_S60 = 4,
    OS_LINUX = 5,
    OS_WINDOWS_CE = 6,
    OS_ANDROID = 7,
    OS_PALM = 8,
    OS_FREEBSD = 9,
    OS_BLACKBERRY = 10,
    OS_SONOS = 11,
    OS_LOGITECH = 12,
    OS_WP7 = 13,
    OS_ONKYO = 14,
    OS_PHILIPS = 15,
    OS_WD = 16,
    OS_VOLVO = 17,
    OS_TIVO = 18,
    OS_AWOX = 19,
    OS_MEEGO = 20,
    OS_QNXNTO = 21,
    OS_BCO = 22
};

enum class AuthenticationType : uint32_t {
    AUTHENTICATION_USER_PASS = 0,
    AUTHENTICATION_STORED_SPOTIFY_CREDENTIALS = 1,
    AUTHENTICATION_STORED_FACEBOOK_CREDENTIALS = 2,
    AUTHENTICATION_SPOTIFY_TOKEN = 3,
    AUTHENTICATION_FACEBOOK_TOKEN = 4
};

class SystemInfo : public BaseProtobufMessage {
private:
public:
    SystemInfo() {};
    CpuFamily cpu_family;
    Os os;
    std::string system_information_string;
    std::string device_id;
    
    bool decodeField(std::shared_ptr<PbReader> reader)	{
        switch (reader->currentTag)
        {
        case 10:
            cpu_family = static_cast<CpuFamily>(reader->decodeVarInt<uint32_t>());
            break;
        case 60:
            os = static_cast<Os>(reader->decodeVarInt<uint32_t>());
            break;
        case 90:
            reader->decodeString(system_information_string);
            break;
        case 100:
            reader->decodeString(device_id);
            break;
        default:
            return false;
        }
        return true;
    }

    void encodeWithWriter(std::shared_ptr<PbWriter> writer) {
        writer->addVarInt(10, static_cast<uint32_t>(cpu_family));
        writer->addVarInt(60, static_cast<uint32_t>(os));
        writer->addString(90, system_information_string);
        writer->addString(100, device_id);
    }
};

class LoginCredentials : public BaseProtobufMessage {
private:
public:
    LoginCredentials() {};
    std::string username;
    AuthenticationType typ;
    std::vector<uint8_t> auth_data;
    
    bool decodeField(std::shared_ptr<PbReader> reader)	{
        switch (reader->currentTag)
        {
        case 10:
            reader->decodeString(username);
            break;
        case 20:
            typ = static_cast<AuthenticationType>(reader->decodeVarInt<uint32_t>());
            break;
        case 30:
            reader->decodeVector(auth_data);
            break;
        default:
            return false;
        }
        return true;
    }

    void encodeWithWriter(std::shared_ptr<PbWriter> writer) {
        writer->addString(10, username);
        writer->addVarInt(20, static_cast<uint32_t>(typ));
        writer->addVector(30, auth_data);
    }
};

class ClientResponseEncrypted : public BaseProtobufMessage {
private:
public:
    ClientResponseEncrypted() {};
    LoginCredentials login_credentials;
    SystemInfo system_info;
    std::string version_string;
    
    bool decodeField(std::shared_ptr<PbReader> reader)	{
        switch (reader->currentTag)
        {
        case 10:
            lastMessagePosition = reader->pos + reader->decodeVarInt<uint32_t>();
            login_credentials.parseWithReader(reader);
            reader->maxPosition = lastMessagePosition;
            break;
        case 50:
            lastMessagePosition = reader->pos + reader->decodeVarInt<uint32_t>();
            system_info.parseWithReader(reader);
            reader->maxPosition = lastMessagePosition;
            break;
        case 70:
            reader->decodeString(version_string);
            break;
        default:
            return false;
        }
        return true;
    }

    void encodeWithWriter(std::shared_ptr<PbWriter> writer) {
        lastMessagePosition = writer->startMessage();
        login_credentials.encodeWithWriter(writer);
        writer->finishMessage(10, lastMessagePosition);
        lastMessagePosition = writer->startMessage();
        system_info.encodeWithWriter(writer);
        writer->finishMessage(50, lastMessagePosition);
        writer->addString(70, version_string);
    }
};

#endif
